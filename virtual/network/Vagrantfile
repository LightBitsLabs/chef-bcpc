# -*- mode: ruby -*-
# vi: set ft=ruby :
base_box = "bento/ubuntu-18.04"

def setup_proxy(node)
  http_proxy  = ENV['http_proxy']  || ''
  https_proxy = ENV['https_proxy'] || ''
  if http_proxy != ''
    node.vm.provision "shell", path: "proxyconfig.sh",
     args: [http_proxy, https_proxy]
  end
end

Vagrant.configure(2) do |config|

  # create 2 spines
  (1..2).each do |s_id|
    hostname = "s#{s_id}"

    config.vm.define hostname do |node|
      config.vm.provider "virtualbox" do |node|
        node.name = hostname
        node.memory = 512
      end

      node.vm.box = base_box
      node.vm.box_download_insecure = true
      node.vm.hostname = hostname

      setup_proxy(node)
      node.vm.provision "shell",
        path: "provisioner.sh",
        args: [hostname,'spine']

      (1..3).each do |r_id|
        (1..2).each do |t_id|
          node.vm.network "private_network",
            virtualbox__intnet: "#{hostname}r#{r_id}t#{t_id}",
            auto_config: false
        end
      end

    end
  end

  # create 6 tors (2 for every rack)
  (1..3).each do |r_id|
    (1..2).each do |t_id|
      hostname = "r#{r_id}t#{t_id}"

      config.vm.define hostname do |node|
        config.vm.provider "virtualbox" do |node|
          node.name = hostname
          node.memory = 512
        end

        node.vm.box = base_box
        node.vm.box_download_insecure = true
        node.vm.hostname = hostname

        setup_proxy(node)
        node.vm.provision "shell",
          path: "provisioner.sh",
          args: [hostname,'tor']

        # private network for tor to spine1
        node.vm.network "private_network",
          virtualbox__intnet: "s1#{hostname}",
          auto_config: false

        # private network for tor to spine2
        node.vm.network "private_network",
          virtualbox__intnet: "s2#{hostname}",
          auto_config: false

        # private network for tor to nodes
        node.vm.network "private_network",
          virtualbox__intnet: "#{hostname}",
          auto_config: false


      end
    end
  end

end

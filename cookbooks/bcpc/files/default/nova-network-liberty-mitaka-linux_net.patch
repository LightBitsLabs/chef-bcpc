--- a/nova/network/linux_net.py
+++ b/nova/network/linux_net.py
@@ -15,6 +15,8 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
+# THIS FILE PATCHED BY BCPC
+
 """Implements vlans, bridges, and iptables rules using linux utilities."""
 
 import calendar
@@ -1127,6 +1129,7 @@
            '--dhcp-optsfile=%s' % _dhcp_file(dev, 'opts'),
            '--listen-address=%s' % network_ref['dhcp_server'],
            '--except-interface=lo',
+           '--interface=%s' % dev,
            '--dhcp-range=set:%s,%s,static,%s,%ss' %
                          (network_ref['label'],
                           network_ref['dhcp_start'],
@@ -1220,7 +1223,8 @@
     # NOTE(cfb): dnsmasq on linux only supports 64 characters in the hostname
     #            field (LP #1238910). Since the . counts as a character we need
     #            to truncate the hostname to only 63 characters.
-    hostname = fixedip.instance.hostname
+    #hostname = fixedip.instance.hostname # EDITED BY BCPC
+    hostname = 'ip-%s' % str(fixedip.address).replace('.', '-')
     if len(hostname) > 63:
         LOG.warning(_LW('hostname %s too long, truncating.') % (hostname))
         hostname = fixedip.instance.hostname[:2] + '-' +\
@@ -1756,6 +1756,8 @@ def _exec_ebtables(*cmd, **kwargs):
     # List of error strings to re-try.
     retry_strings = (
         'Multiple ebtables programs',
+        'Trying to obtain lock',
+        'Unable to create lock file',
     )
 
     # We always try at least once
@@ -1777,18 +1779,22 @@ def _exec_ebtables(*cmd, **kwargs):
             # See if we can retry the error.
             if any(error in exc.stderr for error in retry_strings):
                 if count > attempts and check_exit_code:
-                    LOG.warning(_LW('%s failed. Not Retrying.'), ' '.join(cmd))
+                    LOG.warning(_LW('%s failed (stderr=%s). Not Retrying.'),
+                                ' '.join(cmd), exc.stderr)
                     raise
                 else:
                     # We need to sleep a bit before retrying
-                    LOG.warning(_LW("%(cmd)s failed. Sleeping %(time)s "
+                    LOG.warning(_LW("%(cmd)s failed (stderr=%(stderr)s). "
+                                    "Sleeping %(time)s "
                                     "seconds before retry."),
-                                {'cmd': ' '.join(cmd), 'time': sleep})
+                                {'cmd': ' '.join(cmd), 'time': sleep,
+                                 'stderr': exc.stderr})
                     time.sleep(sleep)
             else:
                 # Not eligible for retry
                 if check_exit_code:
-                    LOG.warning(_LW('%s failed. Not Retrying.'), ' '.join(cmd))
+                    LOG.warning(_LW('%s failed (stderr=%s). Not Retrying.'),
+                                ' '.join(cmd), exc.stderr)
                     raise
                 else:
                     return

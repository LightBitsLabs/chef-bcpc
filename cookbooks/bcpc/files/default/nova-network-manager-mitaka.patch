--- a/nova/network/manager.py
+++ b/nova/network/manager.py
@@ -1103,18 +1103,25 @@ class NetworkManager(manager.Manager):
             LOG.warning(_LW('IP |%s| leased that isn\'t allocated'), fixed_ip,
                         context=context, instance_uuid=fixed_ip.instance_uuid)
 
+    def attempt_network_teardown(self, context, network):
+        if self.__class__.__name__ == 'VlanManager':
+            self._teardown_network_on_host(context, network)
+
     def release_fixed_ip(self, context, address, mac=None):
         """Called by dhcp-bridge when IP is released."""
         LOG.debug('Released IP |%s|', address, context=context)
-        fixed_ip = objects.FixedIP.get_by_address(context, address)
+        fixed_ip = objects.FixedIP.get_by_address(context, address,
+                                                  expected_attrs=['network'])
 
         if fixed_ip.instance_uuid is None:
             LOG.warning(_LW('IP %s released that is not associated'), fixed_ip,
                         context=context)
+            self.attempt_network_teardown(context, fixed_ip.network)
             return
         if not fixed_ip.leased:
             LOG.warning(_LW('IP %s released that was not leased'), fixed_ip,
                         context=context, instance_uuid=fixed_ip.instance_uuid)
+            self.attempt_network_teardown(context, fixed_ip.network)
         else:
             fixed_ip.leased = False
             fixed_ip.save()
@@ -1151,6 +1158,8 @@ class NetworkManager(manager.Manager):
                       instance_uuid=fixed_ip.instance_uuid)
             fixed_ip.disassociate()
 
+        self.attempt_network_teardown(context, fixed_ip.network)
+
     @staticmethod
     def _convert_int_args(kwargs):
         int_args = ("network_size", "num_networks",
